<!--
 - build.xml
 - 
 - Copyright (c) 2012 Lonnie Pryor III
 - 
 - Licensed under the Apache License, Version 2.0 (the "License");
 - you may not use this file except in compliance with the License.
 - You may obtain a copy of the License at
 - 
 -     http://www.apache.org/licenses/LICENSE-2.0
 - 
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS,
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 - See the License for the specific language governing permissions and
 - limitations under the License.
 -->

<project name="Fulcrum" basedir="." default="build">

	<!--
	  Load the locations of various tools into the build script. This file must contain:
	    j2objc.dir  ->  The location of the folder that contains the j2objc and j2obcc executables.
	-->
	<property file="build.properties" />

	<!--
	  Configure the locations of the source code directories.
	-->
	<property name="src.main.java" location="src/main/java" />
	<property name="src.test.java" location="src/test/java" />
	<property name="src.main.objc" location="src/main/objc" />
	<property name="src.test.objc" location="src/test/objc" />

	<!--
	  Configure the locations of the output directories.
	-->
	<property name="out.main.java" location="target/classes/main" />
	<property name="out.test.java" location="target/classes/test" />
	<property name="out.main.objc" location="target/native/main" />
	<property name="out.test.objc" location="target/native/test" />

	<!--
	  Configure the external libraries required for building.
	-->
	<property name="junit.jar" location="${j2objc.dir}/lib/junit-4.10.jar" />

	<!--
	  Generate the Objective-C source code from the Java source code.
	-->
	<target name="generate">
		<!-- Collect the list of main java files to convert. -->
		<fileset id="main.fileset" dir="${src.main.java}">
			<include name="**/*.java" />
		</fileset>
		<pathconvert property="main.files" refid="main.fileset" pathsep=" " />
		<!-- Convert the main Java files to Objective-C. -->
		<mkdir dir="${src.main.objc}" />
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="-use-arc" />
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="-d" />
			<arg value="${src.main.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.main.java}" />
			<arg line="${main.files}" />
		</exec>
		<!-- Collect the list of test java files to convert. -->
		<fileset id="test.fileset" dir="${src.test.java}">
			<include name="**/*.java" />
			<exclude name="Tests.java" />
		</fileset>
		<pathconvert property="test.files" refid="test.fileset" pathsep=" " />
		<!-- Convert the test Java files to Objective-C. -->
		<mkdir dir="${src.test.objc}" />
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="-use-arc" />
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="--no-generate-test-main" />
			<arg value="-classpath" />
			<arg value="${junit.jar}" />
			<arg value="-d" />
			<arg value="${src.test.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.main.java}:${src.test.java}" />
			<arg line="${test.files}" />
		</exec>
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="-use-arc" />
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="-classpath" />
			<arg value="${junit.jar}" />
			<arg value="-d" />
			<arg value="${src.test.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.main.java}:${src.test.java}" />
			<arg value="Tests.java" />
		</exec>
		<!-- Edit the generated main test class in Objective-C to remove an extra test case. -->
		<replace file="${src.test.objc}/Tests.m" token="@&quot;testCount&quot;, " value="" />
	</target>

	<!--
	  Compile the Java source code and the generated Objective-C source code.
	-->
	<target name="compile">
		<!-- Compile the main Java files. -->
		<mkdir dir="${out.main.java}" />
		<javac srcdir="${src.main.java}" destdir="${out.main.java}" includeantruntime="false" />
		<!-- Compile the test Java files. -->
		<mkdir dir="${out.test.java}" />
		<javac srcdir="${src.test.java}" destdir="${out.test.java}" excludes="Tests.java" includeantruntime="false">
			<classpath>
				<path location="${junit.jar}" />
				<path location="${out.main.java}" />
			</classpath>
		</javac>
		<!-- TODO: Compile the Objective-C files. -->
		<mkdir dir="${out.main.objc}" />
		<mkdir dir="${out.test.objc}" />
		<fileset id="main.objc.fileset" dir="${src.main.objc}">
			<include name="**/*.m" />
		</fileset>
		<pathconvert property="main.objc.files" refid="main.objc.fileset" pathsep=" " />
		<fileset id="test.objc.fileset" dir="${src.test.objc}">
			<include name="**/*.m" />
		</fileset>
		<pathconvert property="test.objc.files" refid="test.objc.fileset" pathsep=" " />
		<exec executable="${j2objc.dir}/j2objcc" failonerror="true">
			<arg value="-g" />
			<arg value="-I${src.main.objc}" />
			<arg value="-I${src.test.objc}" />
			<arg value="-l" />
			<arg value="junit" />
			<arg value="-o" />
			<arg value="${out.test.objc}/${ant.project.name}Tests" />
			<arg line="${main.objc.files} ${test.objc.files}" />
		</exec>
	</target>

	<!--
	  Runs the test cases on both the Java code and the generated Objective-C code.
	-->
	<target name="test">
		<!-- Run the Java test cases. -->
		<junit printsummary="true" haltonfailure="true" haltonerror="true">
			<classpath>
				<path location="${junit.jar}" />
				<path location="${out.main.java}" />
				<path location="${out.test.java}" />
			</classpath>
		  <batchtest>
		  	<fileset dir="${out.test.java}" includes="**/*Test.class" />
		  </batchtest>
		</junit>
		<!-- Run the Objective-C test cases. -->
		<exec executable="${out.test.objc}/${ant.project.name}Tests" failonerror="true" />
	</target>

	<!--
	  Removes all generated code and compiled resources.
	-->
	<target name="clean">
		<delete dir="${src.main.objc}" />
		<delete dir="${src.test.objc}" />
		<delete dir="${out.main.java}" />
		<delete dir="${out.test.java}" />
		<delete dir="${out.main.objc}" />
		<delete dir="${out.test.objc}" />
	</target>

	<!--
	  Cleans the project and builds from scratch.
	-->
	<target name="build" depends="clean, generate, compile, test" />

</project>