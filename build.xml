<!-- - build.xml - - Copyright (c) 2012 Lonnie Pryor III - - Licensed under 
	the Apache License, Version 2.0 (the "License"); - you may not use this file 
	except in compliance with the License. - You may obtain a copy of the License 
	at - - http://www.apache.org/licenses/LICENSE-2.0 - - Unless required by 
	applicable law or agreed to in writing, software - distributed under the 
	License is distributed on an "AS IS" BASIS, - WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. - See the License for the specific 
	language governing permissions and - limitations under the License. -->

<project name="Fulcrum" basedir="." default="build">

	<!-- Load the locations of various tools into the build script. This file 
		must contain: lwjgl.dir -> The location of the folder that contains lwjgl.jar. 
		android.dir -> The location of the folder that contains android.jar. j2objc.dir 
		-> The location of the folder that contains the j2objc and j2obcc executables. 
		ios.opengles.dir -> The location of the iOS OpenGL ES headers. -->
	<property file="build.properties" />

	<!-- Configure the locations of the source code directories. -->
	<property name="src.main.java" location="src/main/java" />
	<property name="src.desktop.java" location="src/desktop/java" />
	<property name="src.android.java" location="src/android/java" />
	<property name="src.ios.java" location="src/ios/java" />
	<property name="src.test.java" location="src/test/java" />

	<!-- Configure the locations of the generated directories. -->
	<property name="gen.main.objc" location="target/gen/main/objc" />
	<property name="gen.ios.objc" location="target/gen/ios/objc" />
	<property name="gen.test.objc" location="target/gen/test/objc" />

	<!-- Configure the locations of the output directories. -->
	<property name="out.main.java" location="target/out/classes/main" />
	<property name="out.desktop.java" location="target/out/classes/desktop" />
	<property name="out.android.java" location="target/out/classes/android" />
	<property name="out.ios.java" location="target/out/classes/ios" />
	<property name="out.test.java" location="target/out/classes/test" />
	<property name="out.test.objc" location="target/out/native/test" />

	<!-- Configure the external libraries required for building. -->
	<property name="lwjgl.jar" location="${lwjgl.dir}/lwjgl.jar" />
	<property name="android.jar" location="${android.dir}/android.jar" />
	<property name="j2objc.jar" location="${j2objc.dir}/lib/j2objc.jar" />
	<property name="junit.jar" location="${j2objc.dir}/lib/junit-4.10.jar" />

	<!-- Configure the various build paths. -->
	<path id="main.classpath">
		<pathelement location="${j2objc.jar}" />
	</path>
	<path id="desktop.classpath">
		<pathelement location="${j2objc.jar}" />
		<pathelement location="${out.main.java}" />
		<pathelement location="${lwjgl.jar}" />
	</path>
	<path id="android.classpath">
		<pathelement location="${j2objc.jar}" />
		<pathelement location="${out.main.java}" />
		<pathelement location="${android.jar}" />
	</path>
	<path id="ios.classpath">
		<pathelement location="${j2objc.jar}" />
		<pathelement location="${out.main.java}" />
	</path>
	<path id="test.classpath">
		<pathelement location="${j2objc.jar}" />
		<pathelement path="${desktop.classpath}" />
		<pathelement path="${android.classpath}" />
		<pathelement path="${ios.classpath}" />
		<pathelement location="${out.main.java}" />
		<pathelement location="${out.desktop.java}" />
		<pathelement location="${out.android.java}" />
		<pathelement location="${out.ios.java}" />
		<pathelement location="${junit.jar}" />
	</path>

	<!-- Compile the Java source code. -->
	<target name="compile-java">
		<!-- Compile the main Java files. -->
		<mkdir dir="${out.main.java}" />
		<javac srcdir="${src.main.java}" destdir="${out.main.java}"
			includeantruntime="false">
			<classpath refid="main.classpath" />
		</javac>
		<!-- Compile the desktop Java files. -->
		<mkdir dir="${out.desktop.java}" />
		<javac srcdir="${src.desktop.java}" destdir="${out.desktop.java}"
			includeantruntime="false">
			<classpath refid="desktop.classpath" />
		</javac>
		<!-- Compile the Android Java files. -->
		<mkdir dir="${out.android.java}" />
		<javac srcdir="${src.android.java}" destdir="${out.android.java}"
			includeantruntime="false">
			<classpath refid="android.classpath" />
		</javac>
		<!-- Compile the iOS Java files. -->
		<mkdir dir="${out.ios.java}" />
		<javac srcdir="${src.ios.java}" destdir="${out.ios.java}"
			includeantruntime="false">
			<classpath refid="ios.classpath" />
		</javac>
		<!-- Compile the test Java files. -->
		<mkdir dir="${out.test.java}" />
		<javac srcdir="${src.test.java}" destdir="${out.test.java}"
			excludes="Tests.java" includeantruntime="false">
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<!-- Generate and compile the Objective-C source code. -->
	<target name="compile-objc">
		<!-- Collect the list of main java files to convert. -->
		<fileset id="main.fileset" dir="${src.main.java}">
			<include name="**/*.java" />
		</fileset>
		<pathconvert property="main.files" refid="main.fileset"
			pathsep=" " />
		<!-- Convert the main Java files to Objective-C. -->
		<mkdir dir="${gen.main.objc}" />
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="-classpath" />
			<arg value="${out.main.java}" />
			<arg value="-d" />
			<arg value="${gen.main.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.main.java}" />
			<arg line="${main.files}" />
		</exec>
		<!-- Collect the list of iOS java files to convert. -->
		<fileset id="ios.fileset" dir="${src.ios.java}">
			<include name="**/*.java" />
		</fileset>
		<pathconvert property="ios.files" refid="ios.fileset"
			pathsep=" " />
		<!-- Convert the iOS Java files to Objective-C. -->
		<mkdir dir="${gen.ios.objc}" />
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="-classpath" />
			<arg value="${out.main.java}:${out.ios.java}" />
			<arg value="-d" />
			<arg value="${gen.ios.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.ios.java}" />
			<arg line="${ios.files}" />
		</exec>
		<!-- Collect the list of test java files to convert. -->
		<fileset id="test.fileset" dir="${src.test.java}">
			<include name="**/*.java" />
			<exclude name="Tests.java" />
			<exclude name="**/desktop/**" />
			<exclude name="**/android/**" />
		</fileset>
		<pathconvert property="test.files" refid="test.fileset"
			pathsep=" " />
		<!-- Convert the test Java files to Objective-C. -->
		<mkdir dir="${gen.test.objc}" />
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="--no-generate-test-main" />
			<arg value="-classpath" />
			<arg value="${out.main.java}:${out.ios.java}:${out.test.java}:${junit.jar}" />
			<arg value="-d" />
			<arg value="${gen.test.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.test.java}" />
			<arg line="${test.files}" />
		</exec>
		<exec executable="${j2objc.dir}/j2objc" failonerror="true">
			<arg value="--prefixes" />
			<arg value="prefixes.properties" />
			<arg value="-classpath" />
			<arg value="${out.main.java}:${out.ios.java}:${out.test.java}:${junit.jar}" />
			<arg value="-d" />
			<arg value="${gen.test.objc}" />
			<arg value="-sourcepath" />
			<arg value="${src.test.java}" />
			<arg value="Tests.java" />
		</exec>
		<!-- Edit the generated main test class in Objective-C to remove an extra 
			test case. -->
		<replace file="${gen.test.objc}/Tests.m" token="@&quot;testCount&quot;, "
			value="" />
		<!-- TODO: Compile the Objective-C files. -->
		<mkdir dir="${out.test.objc}" />
		<fileset id="main.objc.fileset" dir="${gen.main.objc}">
			<include name="**/*.m" />
		</fileset>
		<pathconvert property="main.objc.files" refid="main.objc.fileset"
			pathsep=" " />
		<fileset id="ios.objc.fileset" dir="${gen.ios.objc}">
			<include name="**/*.m" />
			<exclude name="**/*IOSGLContext*" />
		</fileset>
		<pathconvert property="ios.objc.files" refid="ios.objc.fileset"
			pathsep=" " />
		<fileset id="test.objc.fileset" dir="${gen.test.objc}">
			<include name="**/*.m" />
		</fileset>
		<pathconvert property="test.objc.files" refid="test.objc.fileset"
			pathsep=" " />
		<exec executable="${j2objc.dir}/j2objcc" failonerror="true">
			<arg value="-g" />
			<arg value="-I${ios.opengles.dir}" />
			<arg value="-I${gen.main.objc}" />
			<arg value="-I${gen.ios.objc}" />
			<arg value="-I${gen.test.objc}" />
			<arg value="-l" />
			<arg value="junit" />
			<arg value="-o" />
			<arg value="${out.test.objc}/${ant.project.name}Tests" />
			<arg line="${main.objc.files} ${ios.objc.files} ${test.objc.files}" />
		</exec>
	</target>

	<!-- Runs the test cases on both the Java code and the generated Objective-C 
		code. -->
	<target name="test">
		<!-- Run the Java test cases. -->
		<junit printsummary="true" haltonfailure="true" haltonerror="true">
			<classpath>
				<path location="${out.main.java}" />
				<path location="${out.desktop.java}" />
				<path location="${out.android.java}" />
				<path location="${out.ios.java}" />
				<path location="${out.test.java}" />
				<path location="${junit.jar}" />
			</classpath>
			<batchtest>
				<fileset dir="${out.test.java}" includes="**/*Test.class" excludes="**/ios/**" />
			</batchtest>
		</junit>
		<!-- Run the Objective-C test cases. -->
		<exec executable="${out.test.objc}/${ant.project.name}Tests"
			failonerror="true" />
	</target>

	<!-- Removes all generated code and compiled resources. -->
	<target name="clean">
		<delete dir="${gen.main.objc}" />
		<delete dir="${gen.ios.objc}" />
		<delete dir="${gen.test.objc}" />
		<delete dir="${out.main.java}" />
		<delete dir="${out.desktop.java}" />
		<delete dir="${out.andriod.java}" />
		<delete dir="${out.ios.java}" />
		<delete dir="${out.test.java}" />
		<delete dir="${out.test.objc}" />
	</target>

	<!-- Cleans the project and builds from scratch. -->
	<target name="build" depends="clean, compile-java, compile-objc, test" />

</project>